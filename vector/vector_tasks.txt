# **************************************************************************** #
#                                                                              #
#                                                        ..eeeee..             #
#    vector_tasks.txt                                  e8'   8   '8e           #
#                                                     d8     8     8b          #
#    By: dries <sanderlegit@gmail.com>                8!   .dWb.   !8          #
#                                                     Y8 .e* 8 *e. 8P          #
#    Created: 2021/03/10 18:00:06 by dries             *8*   8   *8*           #
#    Updated: 2021/03/25 16:04:17 by dries               **ee8ee**             #
#                                                                              #
# **************************************************************************** #

Member functions
(constructor)		Construct vector (public member function )			-all but range written,tested
(destructor)		Vector destructor (public member function )			-written,tested
operator=			Assign content (public member function )			-written,tested

Iterators:		no test for const iterators
begin				Return iterator to beginning (public member function )					-written,tested
end					Return iterator to end (public member function )						-written,tested
rbegin				Return reverse iterator to reverse beginning (public member function )	-written,tested
rend				Return reverse iterator to reverse end (public member function )		-written,tested

Capacity:
size				Return size (public member function )									-written,tested
max_size			Return maximum size (public member function )							-written,tested
resize				Change size (public member function )									-written,tested
capacity			Return size of allocated storage capacity (public member function )		-written,tested
empty				Test whether vector is empty (public member function )					-written,tested
reserve				Request a change in capacity (public member function )					-written,tested

Element access:
operator[]			Access element (public member function )			-written,tested
at					Access element (public member function )			-written,tested
front				Access first element (public member function )		-written,tested			no test for const versions
back				Access last element (public member function )		-written,tested			no test for const versions

Modifiers:
assign				Assign vector content (public member function )			-written,tested
push_back			Add element at the end (public member function )		-written,tested
pop_back			Delete last element (public member function )			-written,tested
insert				Insert elements (public member function )				-written,tested
erase				Erase elements (public member function )				-written,tested
swap				Swap content (public member function )					-written,tested		TODO- check iterator validity
clear				Clear content (public member function )					-written,tested

Non-member function overloads
relational operators		Relational operators for vector (function template )	-written,tested
swap						Exchange contents of vectors (function template )		-written,tested	TODO- check iterator validity

Template specializations
vector<bool>				Vector of bool (class template specialization )

iterators!
https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator
https://en.cppreference.com/w/cpp/iterator/iterator_tags

LegacyRandomAccessIterator > LegacyBidirectionalIterator > LegacyForwardIterator > LegacyInputIterator > [ LegacyIterator & EqualityComparable ]

i objects of type It or const It
r, a value of type It&
n, an integer of type difference_type
t, an lvalue or var

LegacyRandomAccessIterator			https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator
	r += n				done using ++		returns iterator reference
	r -= n				r += -n;			returns iterator reference
	i + n or i + a		done using +=		returns iterator
	i - n				done using -=		returns iterator
	i - i2									returns difference in idx
	i[n]				*(i + n)
	i < i2
	i > i2				(next 3 can be done using < )
	i >= i2
	i <= i2

	LegacyOutputIterator			https://en.cppreference.com/w/cpp/named_req/OutputIterator //This is a terrible spec
		*i = t
		i++
		++i
		*r++ = t

	LegacyBidirectionalIterator		https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator
		--a		returns iterator reference
		a--		returns const iterator reference
		*a--	returns reference

		LegacyForwardIterator		https://en.cppreference.com/w/cpp/named_req/ForwardIterator
			i++			returns iterator
			*i++		returns reference

			LegacyInputIterator		https://en.cppreference.com/w/cpp/named_req/InputIterator
				i != J
				*i
				i->m
				++i			returns iterator reference
				i++
				*i++		returns value type

				EqualityComparable	https://en.cppreference.com/w/cpp/named_req/EqualityComparable
					i == i2

				LegacyIterator		https://en.cppreference.com/w/cpp/named_req/Iterator
					*r
					++r		reutnrs iterator reference

or more simply ;)

X a;		Is default-constructible, copy-constructible, copy-assignable and destructible
X b(a);
b = a;
	1|1|1 tested

a == b		Can be compared for equivalence using the equality/inequality operators
a != b		(meaningful when both iterator values iterate over the same underlying sequence).
	1|1 tested

*a			Can be dereferenced as an rvalue (if in a dereferenceable state).
a->m
	1|1 tested

*a = t		For mutable iterators (non-constant iterators):
			Can be dereferenced as an lvalue (if in a dereferenceable state).
	1 tested

++a			Can be incremented (if in a dereferenceable state).
a++			The result is either also dereferenceable or a past-the-end iterator.
*a++		Two iterators that compare equal, keep comparing equal after being both increased.
	1|1|1 tested

--a			Can be decremented (if a dereferenceable iterator value precedes it).
a--
*a--
	1|1|1 tested

n + a 		Supports the arithmetic operators + and - between an iterator and an integer value,
a + n
a - n 		or subtracting an iterator from another.
a - b			check what the return of this is
	1|1|1|1 tested

a < b 		Can be compared with inequality relational operators (<, >, <= and >=).
a > b
a <= b
a >= b
	1|1|1|1 tested

a += n		Supports compound assignment operations += and -=
a -= n
	1|1 tested

a[n]		Supports the offset dereference operator ([])
	1 tested




